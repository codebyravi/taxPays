{"ast":null,"code":"import _classCallCheck from \"/Users/ravivalluri/Desktop/taxPays/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ravivalluri/Desktop/taxPays/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/ravivalluri/Desktop/taxPays/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ravivalluri/Desktop/taxPays/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/ravivalluri/Desktop/taxPays/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/ravivalluri/Desktop/taxPays/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport ProgressTracker from './ProgressTracker';\nimport AdjustmentSlider from './AdjustmentSlider';\nimport PresetSetter from './PresetSetter';\nimport budget_function from './budget_function_2018.json';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    /** can be passed budget by function or agency (function for now) */\n\n    _this.categories = _this.populateCategories(budget_function);\n    _this.state = {\n      // target: 1000,\n      amount_raised: 0,\n      // set the program we're raising money for\n      program_name: \"Send Humans to Mars\",\n      program_target: 220000000000\n    };\n    return _this;\n  }\n  /** Takes the json of categories and adds them to the App's this.categories */\n\n\n  _createClass(App, [{\n    key: \"populateCategories\",\n    value: function populateCategories(json) {\n      var categories = [];\n\n      for (var index in json.results) {\n        var new_category = {\n          name: json.results[index].name,\n          spending: json.results[index].amount,\n          amount_cut: 0\n        };\n        categories.push(new_category);\n      }\n\n      return categories;\n    }\n    /** should be passed to a component to change what program we are raising money for */\n\n  }, {\n    key: \"setProgram\",\n    value: function setProgram(name, target) {\n      this.setState({\n        program_name: name,\n        program_target: target\n      });\n    }\n  }, {\n    key: \"updateCategory\",\n    value: function updateCategory(name, amount) {\n      for (var index in this.categories) {\n        var category = this.categories[index];\n\n        if (category.name === name) {\n          var new_category = {\n            name: name,\n            spending: category.spending,\n            amount_cut: Number(amount) // set the category at index to the new category\n\n          };\n          this.categories[index] = new_category;\n        }\n      }\n\n      console.log(this.categories);\n    }\n    /** goes through the categories and subtracts their values from the initial amount. Called every time a slider is adjusted */\n\n  }, {\n    key: \"calculateTotal\",\n    value: function calculateTotal() {\n      var _this2 = this;\n\n      var new_amount_cut = 0;\n      this.categories.forEach(function (category) {\n        new_amount_cut += category.amount_cut;\n      }); // console.log(this);\n\n      this.setState({\n        amount_raised: new_amount_cut\n      }, function () {\n        console.log(\"I ran: \", _this2.state);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      // TODO: move for loop block into its own function\n      var sliders = [];\n\n      var _loop = function _loop(index) {\n        var category = _this3.categories[index];\n        var slider = React.createElement(AdjustmentSlider, {\n          key: category.name,\n          name: category.name,\n          spending: category.spending,\n          amount_cut: category.amount_cut // TODO rename name and cat: misleading\n          ,\n          updateCategory: function updateCategory(name, cat) {\n            _this3.updateCategory(name, cat);\n          },\n          calculate: function calculate() {\n            _this3.calculateTotal(category.name, category.amount_cut);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85\n          },\n          __self: this\n        });\n        sliders.push(slider);\n      };\n\n      for (var index in this.categories) {\n        _loop(index);\n      }\n\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(PresetSetter, {\n        setProgram: function setProgram(name, dollars) {\n          _this3.setProgram(name, dollars);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }), React.createElement(\"header\", {\n        className: \"App-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"sliders\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, sliders), React.createElement(ProgressTracker, {\n        title: this.state.program_name,\n        default_value: this.state.program_target,\n        new: this.state.amount_raised,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/ravivalluri/Desktop/taxPays/src/App.js"],"names":["React","Component","ProgressTracker","AdjustmentSlider","PresetSetter","budget_function","App","props","categories","populateCategories","state","amount_raised","program_name","program_target","json","index","results","new_category","name","spending","amount","amount_cut","push","target","setState","category","Number","console","log","new_amount_cut","forEach","sliders","slider","cat","updateCategory","calculateTotal","dollars","setProgram"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport ProgressTracker from './ProgressTracker';\n\nimport AdjustmentSlider from './AdjustmentSlider';\n\nimport PresetSetter from './PresetSetter';\n\nimport budget_function from './budget_function_2018.json';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n\n    /** can be passed budget by function or agency (function for now) */\n    this.categories = this.populateCategories(budget_function);\n\n    this.state = {\n      // target: 1000,\n      amount_raised: 0,\n\n      // set the program we're raising money for\n      program_name: \"Send Humans to Mars\",\n      program_target: 220000000000,\n    }\n  }\n\n  /** Takes the json of categories and adds them to the App's this.categories */\n  populateCategories(json) {\n    let categories = []\n\n    for (let index in json.results) {\n      let new_category = {\n        name: json.results[index].name,\n        spending: json.results[index].amount,\n        amount_cut: 0,\n      }\n      categories.push(new_category);\n    }\n    return categories;\n  }\n\n  /** should be passed to a component to change what program we are raising money for */\n  setProgram(name, target) {\n    this.setState({ program_name: name, program_target: target });\n  }\n\n  updateCategory(name, amount) {\n    for (let index in this.categories) {\n      let category = this.categories[index];\n      if (category.name === name) {\n        let new_category = {\n          name: name,\n          spending: category.spending,\n          amount_cut: Number(amount),\n        }\n        // set the category at index to the new category\n        this.categories[index] = new_category;\n      }\n    }\n    console.log(this.categories)\n  }\n\n  /** goes through the categories and subtracts their values from the initial amount. Called every time a slider is adjusted */\n  calculateTotal() {\n    let new_amount_cut = 0;\n\n    this.categories.forEach((category) => {\n      new_amount_cut += category.amount_cut;\n    });\n\n    // console.log(this);\n    this.setState({ amount_raised: new_amount_cut }, () => {\n      console.log(\"I ran: \", this.state);\n    });\n  }\n\n  render() {\n    // TODO: move for loop block into its own function\n    let sliders = [];\n    for (let index in this.categories) {\n      let category = this.categories[index];\n      let slider = (\n        <AdjustmentSlider\n          key={category.name}\n          name={category.name}\n          spending={category.spending}\n          amount_cut={category.amount_cut}\n          // TODO rename name and cat: misleading\n          updateCategory={(name, cat) => {\n            this.updateCategory(name, cat)\n          }}\n          calculate={() => {\n            this.calculateTotal(category.name, category.amount_cut);\n          }}\n        />\n      )\n      sliders.push(slider);\n    }\n\n    return (\n      <div className=\"App\">\n        <PresetSetter\n          setProgram={(name, dollars) => {\n            this.setProgram(name, dollars)\n          }}\n        ></PresetSetter>\n        <header className=\"App-header\">\n          <div className=\"sliders\">\n            {sliders}\n          </div>\n          <ProgressTracker\n            title={this.state.program_name}\n            default_value={this.state.program_target}\n            new={this.state.amount_raised}\n          />\n          <br></br>\n          <br></br>\n        </header>\n\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}